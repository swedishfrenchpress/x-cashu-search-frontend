/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_witness_free(a: number): void;
export function witness_new(a: number, b: number, c: number, d: number, e: number): void;
export function witness_signatures(a: number, b: number): void;
export function witness_preimage(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_fromHex(a: number, b: number, c: number): void;
export function publickey_toHex(a: number, b: number): void;
export function __wbg_id_free(a: number): void;
export function id_tryFromBase64(a: number, b: number, c: number): void;
export function id_asString(a: number, b: number): void;
export function __wbg_keyset_free(a: number): void;
export function keypair_new(a: number, b: number, c: number, d: number): number;
export function keypair_id(a: number): number;
export function keypair_keys(a: number): number;
export function __wbg_keysetsresponse_free(a: number): void;
export function keysetsresponse_new(a: number, b: number): void;
export function keysetsresponse_keys(a: number, b: number): void;
export function __wbg_keysresponse_free(a: number): void;
export function keysresponse_new(a: number, b: number): void;
export function keysresponse_keysets(a: number, b: number): void;
export function __wbg_htlcwitness_free(a: number): void;
export function __wbg_htlcspendingconditions_free(a: number): void;
export function htlcspendingconditions_new(a: number, b: number, c: number, d: number): void;
export function __wbg_mintquote_free(a: number): void;
export function mintquote_id(a: number, b: number): void;
export function mintquote_unit(a: number): number;
export function mintquote_amount(a: number): number;
export function mintquote_request(a: number, b: number): void;
export function mintquote_paid(a: number): number;
export function mintquote_expiry(a: number): number;
export function __wbg_wallet_free(a: number): void;
export function wallet_new(a: number, b: number, c: number, d: number): number;
export function wallet_unitBalance(a: number, b: number): number;
export function wallet_pendingUnitBalance(a: number, b: number): number;
export function wallet_totalBalance(a: number): number;
export function wallet_totalPendingBalance(a: number): number;
export function wallet_checkAllPendingProofs(a: number, b: number, c: number, d: number): number;
export function wallet_mintBalances(a: number): number;
export function wallet_addMint(a: number, b: number, c: number): number;
export function wallet_refreshMint(a: number, b: number, c: number): number;
export function wallet_mintQuote(a: number, b: number, c: number, d: number, e: number): number;
export function wallet_mintQuoteStatus(a: number, b: number, c: number, d: number, e: number): number;
export function wallet_checkAllMintQuotes(a: number): number;
export function wallet_mint(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function wallet_meltQuote(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function wallet_meltQuoteStatus(a: number, b: number, c: number, d: number, e: number): number;
export function wallet_melt(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function wallet_receive(a: number, b: number, c: number, d: number): number;
export function wallet_send(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wallet_swap(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function __wbg_blindsignature_free(a: number): void;
export function blindsignature_new(a: number, b: number, c: number, d: number): number;
export function __wbg_mintproofs_free(a: number): void;
export function __wbg_swaprequest_free(a: number): void;
export function swaprequest_new(a: number, b: number, c: number): void;
export function swaprequest_proofs(a: number, b: number): void;
export function swaprequest_outputs(a: number, b: number): void;
export function swaprequest_proofsAmount(a: number): number;
export function swaprequest_outputAmount(a: number): number;
export function __wbg_splitresponse_free(a: number): void;
export function splitresponse_new(a: number, b: number): void;
export function splitresponse_signatures(a: number, b: number): void;
export function splitresponse_promisesAmount(a: number): number;
export function __wbg_checkstaterequest_free(a: number): void;
export function __wbg_proofstate_free(a: number): void;
export function __wbg_checkstateresponse_free(a: number): void;
export function __wbg_restorerequest_free(a: number): void;
export function __wbg_restoreresponse_free(a: number): void;
export function __wbg_secretdata_free(a: number): void;
export function __wbg_nut10secret_free(a: number): void;
export function __wbg_meltquote_free(a: number): void;
export function meltquote_id(a: number, b: number): void;
export function meltquote_unit(a: number): number;
export function meltquote_amount(a: number): number;
export function meltquote_request(a: number, b: number): void;
export function meltquote_fee_reserve(a: number): number;
export function meltquote_paid(a: number): number;
export function meltquote_expiry(a: number): number;
export function start(): void;
export function __wbg_blindedmessage_free(a: number): void;
export function blindedmessage_new(a: number, b: number, c: number, d: number): number;
export function blindedmessage_keyset_id(a: number): number;
export function blindedmessage_amount(a: number): number;
export function blindedmessage_blinded_secret(a: number): number;
export function blindedmessage_witness(a: number): number;
export function __wbg_proof_free(a: number): void;
export function proof_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function proof_secret(a: number): number;
export function proof_keyset_id(a: number): number;
export function __wbg_token_free(a: number): void;
export function token_new(a: number, b: number, c: number): void;
export function __wbg_mintquotebolt11request_free(a: number): void;
export function __wbg_mintquotebolt11response_free(a: number): void;
export function mintquotebolt11response_paid(a: number): number;
export function mintquotebolt11response_quote(a: number, b: number): void;
export function mintquotebolt11response_request(a: number, b: number): void;
export function __wbg_mintbolt11request_free(a: number): void;
export function mintbolt11request_new(a: number, b: number, c: number, d: number): void;
export function mintbolt11request_outputs(a: number, b: number): void;
export function mintbolt11request_totalAmount(a: number): number;
export function __wbg_postmintresponse_free(a: number): void;
export function postmintresponse_new(a: number, b: number): void;
export function postmintresponse_signatures(a: number, b: number): void;
export function __wbg_mintmethodsettings_free(a: number): void;
export function __wbg_settings_free(a: number): void;
export function __wbg_p2pkwitness_free(a: number): void;
export function __wbg_p2pkspendingconditions_free(a: number): void;
export function p2pkspendingconditions_new(a: number, b: number, c: number, d: number): void;
export function __wbg_conditions_free(a: number): void;
export function conditions_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function conditions_locktime(a: number, b: number): void;
export function conditions_pubkeys(a: number, b: number): void;
export function conditions_refund_keys(a: number, b: number): void;
export function conditions_num_sigs(a: number, b: number): void;
export function conditions_sig_flag(a: number, b: number): void;
export function __wbg_blindsignaturedleq_free(a: number): void;
export function blindedsignaturedleq_new(a: number, b: number): number;
export function blindedsignaturedleq_e(a: number): number;
export function blindedsignaturedleq_s(a: number): number;
export function __wbg_proofdleq_free(a: number): void;
export function proofdleq_new(a: number, b: number, c: number): number;
export function proofdleq_r(a: number): number;
export function mintquotebolt11response_expiry(a: number, b: number): void;
export function proof_amount(a: number): number;
export function proof_c(a: number): number;
export function proofdleq_e(a: number): number;
export function proofdleq_s(a: number): number;
export function __wbg_premint_free(a: number): void;
export function __wbg_premintsecrets_free(a: number): void;
export function __wbg_keys_free(a: number): void;
export function keys_new(a: number, b: number): void;
export function keys_keys(a: number, b: number): void;
export function keys_amountKey(a: number, b: number): number;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_toHex(a: number, b: number): void;
export function __wbg_meltquotebolt11request_free(a: number): void;
export function __wbg_meltquotebolt11response_free(a: number): void;
export function __wbg_meltbolt11request_free(a: number): void;
export function __wbg_postmeltresponse_free(a: number): void;
export function __wbg_meltmethodsettings_free(a: number): void;
export function __wbg_nut05settings_free(a: number): void;
export function __wbg_mintversion_free(a: number): void;
export function mintversion_new(a: number, b: number, c: number, d: number, e: number): void;
export function mintversion_name(a: number, b: number): void;
export function mintversion_version(a: number, b: number): void;
export function __wbg_mintinfo_free(a: number): void;
export function mintinfo_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function mintinfo_name(a: number, b: number): void;
export function mintinfo_pubkey(a: number): number;
export function mintinfo_version(a: number): number;
export function mintinfo_description(a: number, b: number): void;
export function mintinfo_description_long(a: number, b: number): void;
export function mintinfo_contact(a: number, b: number): void;
export function mintinfo_nuts(a: number, b: number): void;
export function mintinfo_motd(a: number, b: number): void;
export function __wbg_amount_free(a: number): void;
export function amount_new(a: number): number;
export function amount_split(a: number, b: number): void;
export function amount_value(a: number): number;
export function __wbg_melted_free(a: number): void;
export function melted_paid(a: number): number;
export function melted_preimage(a: number, b: number): void;
export function melted_change(a: number, b: number): void;
export function __wbg_secret_free(a: number): void;
export function secret_new(): number;
export function secret_asBytes(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_context_create(a: number): number;
export function rustsecp256k1_v0_8_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_8_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h93d2262a08248529(a: number, b: number, c: number, d: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h795549e6e8e06531(a: number, b: number, c: number): void;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h1be44c9bdd1b9b59(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
